"""
Test cases cho h·ªá th·ªëng Caelio Personality
Ki·ªÉm tra t√≠nh ch√≠nh x√°c theo t√†i li·ªáu
"""

from caelio_personality_system import CaelioPersonalitySystem
from caelio_book_matcher import CaelioBookMatcher
import pandas as pd

def test_example_from_documentation():
    """
    Test v√≠ d·ª• t·ª´ t√†i li·ªáu:
    K·∫øt qu·∫£ mong ƒë·ª£i: Thinker‚ÄìSynthesizer
    """
    system = CaelioPersonalitySystem()
    
    # V√≠ d·ª• t·ª´ t√†i li·ªáu
    answers = {
        'Q1': 'C',  # Tri th·ª©c
        'Q2': 'D',  # Ki·∫øn t·∫°o  
        'Q3': 'E',  # Synthesizer +1
        'Q4': 'C',  # Synthesizer +1
        'Q5': 'B',  # T·ª± do
        'Q6': 'E',  # Synthesizer +1
        'Q7': 'C',  # Tri th·ª©c
        'Q8': 'C'   # Synthesizer +1
    }
    
    profile = system.calculate_discovery_profile(answers)
    
    print("=== TEST V√ç D·ª§ T√ÄI LI·ªÜU ===")
    print(f"C√¢u tr·∫£ l·ªùi: {answers}")
    print(f"ƒêi·ªÉm c√°c nh√≥m: {profile['all_scores']}")
    print(f"ƒêi·ªÉm Synthesizer: {profile['synthesizer_score']}")
    print(f"K·∫øt qu·∫£: {profile['profile_name']}")
    print(f"Mong ƒë·ª£i: Tri th·ª©c‚ÄìSynthesizer")
    
    # Ki·ªÉm tra
    assert profile['primary_group'] == 'Tri th·ª©c', f"Expected 'Tri th·ª©c', got '{profile['primary_group']}'"
    assert profile['synthesizer_score'] == 4, f"Expected 4, got {profile['synthesizer_score']}"
    assert profile['is_synthesizer'] == True, f"Expected True, got {profile['is_synthesizer']}"
    assert 'Synthesizer' in profile['profile_name'], f"Expected 'Synthesizer' in name, got '{profile['profile_name']}'"
    
    print("‚úÖ PASS: V√≠ d·ª• t√†i li·ªáu ch√≠nh x√°c!")
    return profile

def test_pure_connector():
    """Test tr∆∞·ªùng h·ª£p thu·∫ßn K·∫øt n·ªëi"""
    system = CaelioPersonalitySystem()
    
    answers = {
        'Q1': 'A',  # K·∫øt n·ªëi
        'Q2': 'A',  # K·∫øt n·ªëi
        'Q3': 'A',  # K·∫øt n·ªëi
        'Q4': 'A',  # Tri th·ª©c (ƒë·ªçc s√¢u)
        'Q5': 'A',  # K·∫øt n·ªëi
        'Q6': 'A',  # K·∫øt n·ªëi
        'Q7': 'A',  # K·∫øt n·ªëi
        'Q8': 'A'   # K·∫øt n·ªëi
    }
    
    profile = system.calculate_discovery_profile(answers)
    
    print("\n=== TEST PURE CONNECTOR ===")
    print(f"K·∫øt qu·∫£: {profile['profile_name']}")
    print(f"ƒêi·ªÉm K·∫øt n·ªëi: {profile['all_scores']['K·∫øt n·ªëi']}")
    print(f"Synthesizer: {profile['is_synthesizer']}")
    
    assert profile['primary_group'] == 'K·∫øt n·ªëi'
    assert profile['is_synthesizer'] == False
    print("‚úÖ PASS: Pure Connector ch√≠nh x√°c!")
    return profile

def test_tie_breaker():
    """Test tr∆∞·ªùng h·ª£p h√≤a ƒëi·ªÉm - ∆∞u ti√™n WHY"""
    system = CaelioPersonalitySystem()
    
    # K·∫øt n·ªëi vs Tri th·ª©c h√≤a, nh∆∞ng K·∫øt n·ªëi chi·∫øm ∆∞u th·∫ø trong WHY (Q1-Q3)
    answers = {
        'Q1': 'A',  # K·∫øt n·ªëi - WHY
        'Q2': 'A',  # K·∫øt n·ªëi - WHY  
        'Q3': 'C',  # Tri th·ª©c - WHY
        'Q4': 'A',  # Tri th·ª©c
        'Q5': 'A',  # K·∫øt n·ªëi
        'Q6': 'C',  # Tri th·ª©c
        'Q7': 'A',  # K·∫øt n·ªëi
        'Q8': 'B'   # Tri th·ª©c
    }
    
    profile = system.calculate_discovery_profile(answers)
    
    print("\n=== TEST TIE BREAKER ===")
    print(f"ƒêi·ªÉm: {profile['all_scores']}")
    print(f"K·∫øt qu·∫£: {profile['profile_name']}")
    print(f"WHY answers: Q1=A(K·∫øt n·ªëi), Q2=A(K·∫øt n·ªëi), Q3=C(Tri th·ª©c)")
    
    # K·∫øt n·ªëi chi·∫øm 2/3 trong WHY n√™n ƒë∆∞·ª£c ∆∞u ti√™n
    assert profile['primary_group'] == 'K·∫øt n·ªëi'
    print("‚úÖ PASS: Tie breaker theo WHY ch√≠nh x√°c!")
    return profile

def test_synthesizer_conditions():
    """Test c√°c ƒëi·ªÅu ki·ªán k√≠ch ho·∫°t Synthesizer"""
    system = CaelioPersonalitySystem()
    
    # Synthesizer score = 3, primary vs secondary ch√™nh 1 -> should be Synthesizer
    answers = {
        'Q1': 'A',  # K·∫øt n·ªëi
        'Q2': 'B',  # T·ª± do
        'Q3': 'E',  # Synthesizer +1
        'Q4': 'C',  # Synthesizer +1
        'Q5': 'C',  # Synthesizer +1
        'Q6': 'A',  # K·∫øt n·ªëi
        'Q7': 'B',  # T·ª± do
        'Q8': 'A'   # K·∫øt n·ªëi
    }
    
    profile = system.calculate_discovery_profile(answers)
    
    print("\n=== TEST SYNTHESIZER CONDITIONS ===")
    print(f"ƒêi·ªÉm: {profile['all_scores']}")
    print(f"Synthesizer score: {profile['synthesizer_score']}")
    print(f"Ch√™nh l·ªách ƒëi·ªÉm: {abs(profile['primary_score'] - profile['secondary_score'])}")
    print(f"L√† Synthesizer: {profile['is_synthesizer']}")
    
    # Synthesizer score >= 3 v√† ch√™nh l·ªách <= 1
    expected_synthesizer = profile['synthesizer_score'] >= 3 and abs(profile['primary_score'] - profile['secondary_score']) <= 1
    assert profile['is_synthesizer'] == expected_synthesizer
    print("‚úÖ PASS: ƒêi·ªÅu ki·ªán Synthesizer ch√≠nh x√°c!")
    return profile

def test_book_matching():
    """Test matching s√°ch theo t√≠nh c√°ch"""
    matcher = CaelioBookMatcher()
    
    # T·∫°o d·ªØ li·ªáu s√°ch m·∫´u
    sample_books = [
        {'product_id': 1, 'title': 'C√¢y Cam Ng·ªçt C·ªßa T√¥i', 'category': 'Ti·ªÉu Thuy·∫øt', 'authors': 'Jos√© Mauro'},
        {'product_id': 2, 'title': 'Thao T√∫ng T√¢m L√Ω', 'category': 'S√°ch t∆∞ duy - K·ªπ nƒÉng s·ªëng', 'authors': 'Dale Carnegie'},
        {'product_id': 3, 'title': 'Marketing 4.0', 'category': 'S√°ch Marketing - B√°n h√†ng', 'authors': 'Philip Kotler'},
        {'product_id': 4, 'title': 'L·ªãch S·ª≠ Vi·ªát Nam', 'category': 'L·ªãch s·ª≠', 'authors': 'Tr·∫ßn Tr·ªçng Kim'},
        {'product_id': 5, 'title': 'Tri·∫øt H·ªçc Ph∆∞∆°ng ƒê√¥ng', 'category': 'Tri·∫øt h·ªçc', 'authors': 'Alan Watts'},
    ]
    book_df = pd.DataFrame(sample_books)
    
    # Test v·ªõi Connector profile
    connector_answers = {
        'Q1': 'A', 'Q2': 'A', 'Q3': 'A', 'Q4': 'A', 
        'Q5': 'A', 'Q6': 'A', 'Q7': 'A', 'Q8': 'A'
    }
    
    result = matcher.get_personalized_recommendations(connector_answers, book_df)
    
    print("\n=== TEST BOOK MATCHING ===")
    print(f"Profile: {result['profile']['profile_name']}")
    print(f"T·ªïng s√°ch match: {result['total_matches']}")
    print("Top recommendations:")
    for _, book in result['recommendations'].head(3).iterrows():
        print(f"- {book['title']} ({book['category']}) - Score: {book['personality_match_score']:.2f}")
    
    # S√°ch v·ªÅ t√¢m l√Ω/k·ªπ nƒÉng s·ªëng n√™n c√≥ ƒëi·ªÉm cao cho Connector
    psychology_books = result['recommendations'][
        result['recommendations']['category'] == 'S√°ch t∆∞ duy - K·ªπ nƒÉng s·ªëng'
    ]
    
    assert len(psychology_books) > 0, "Should find psychology books for Connector"
    assert psychology_books.iloc[0]['personality_match_score'] >= 0.8, "Psychology books should have high score"
    
    print("‚úÖ PASS: Book matching ch√≠nh x√°c!")
    return result

def run_all_tests():
    """Ch·∫°y t·∫•t c·∫£ test cases"""
    print("üß™ CH·∫†Y T·∫§T C·∫¢ TEST CASES")
    print("="*50)
    
    try:
        test_example_from_documentation()
        test_pure_connector() 
        test_tie_breaker()
        test_synthesizer_conditions()
        test_book_matching()
        
        print("\nüéâ T·∫§T C·∫¢ TEST CASES PASSED!")
        print("H·ªá th·ªëng ho·∫°t ƒë·ªông ch√≠nh x√°c theo t√†i li·ªáu.")
        
    except Exception as e:
        print(f"\n‚ùå TEST FAILED: {e}")
        raise e

def interactive_test():
    """Test t∆∞∆°ng t√°c"""
    system = CaelioPersonalitySystem()
    
    print("\nüéØ TEST T∆Ø∆†NG T√ÅC")
    print("Tr·∫£ l·ªùi c√°c c√¢u h·ªèi ƒë·ªÉ test h·ªá th·ªëng:")
    
    answers = {}
    for q_id, question_data in system.discovery_questions.items():
        print(f"\n{q_id}. {question_data['question']}")
        for choice_key, choice_data in question_data['choices'].items():
            print(f"  {choice_key}. {choice_data['text']}")
        
        while True:
            choice = input("Ch·ªçn (A/B/C/D/E): ").upper().strip()
            if choice in question_data['choices']:
                answers[q_id] = choice
                break
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    
    profile = system.calculate_discovery_profile(answers)
    
    print(f"\n=== K·∫æT QU·∫¢ ===")
    print(f"Profile: {profile['profile_name']}")
    print(f"English: {profile['english_name']}")
    print(f"ƒêi·ªÉm c√°c nh√≥m: {profile['all_scores']}")
    print(f"Synthesizer score: {profile['synthesizer_score']}")
    
    return profile

if __name__ == "__main__":
    # Ch·∫°y automated tests
    run_all_tests()
    
    # T√πy ch·ªçn ch·∫°y test t∆∞∆°ng t√°c
    print("\n" + "="*50)
    choice = input("Ch·∫°y test t∆∞∆°ng t√°c? (y/n): ").lower().strip()
    if choice == 'y':
        interactive_test()