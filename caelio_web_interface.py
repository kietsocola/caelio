"""
Web Interface cho h·ªá th·ªëng Caelio Personality Test
Ch·∫°y b·∫±ng Streamlit
"""

import streamlit as st
import pandas as pd
from caelio_personality_system import CaelioPersonalitySystem
from caelio_book_matcher import CaelioBookMatcher

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Caelio Personality Test",
    page_icon="üìö",
    layout="wide"
)

def main():
    st.title("üìö Caelio - H·ªá th·ªëng g·ª£i √Ω s√°ch theo t√≠nh c√°ch")
    st.markdown("*Kh√°m ph√° cu·ªën s√°ch ph√π h·ª£p v·ªõi t√≠nh c√°ch ƒë·ªçc c·ªßa b·∫°n*")
    
    # Kh·ªüi t·∫°o session state
    if 'current_question' not in st.session_state:
        st.session_state.current_question = 0
    if 'answers' not in st.session_state:
        st.session_state.answers = {}
    if 'journey_type' not in st.session_state:
        st.session_state.journey_type = None
    if 'profile_result' not in st.session_state:
        st.session_state.profile_result = None
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    personality_system = CaelioPersonalitySystem()
    book_matcher = CaelioBookMatcher()
    
    # B∆∞·ªõc 1: Ch·ªçn h√†nh tr√¨nh
    if st.session_state.journey_type is None:
        show_journey_selection()
    
    # B∆∞·ªõc 2: Tr·∫£ l·ªùi c√¢u h·ªèi
    elif st.session_state.profile_result is None:
        if st.session_state.journey_type == 'discovery':
            show_discovery_questions(personality_system)
        else:
            st.warning("H√†nh tr√¨nh chuy√™n ng√†nh ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...")
            if st.button("Quay l·∫°i ch·ªçn h√†nh tr√¨nh"):
                reset_test()
    
    # B∆∞·ªõc 3: Hi·ªÉn th·ªã k·∫øt qu·∫£
    else:
        show_results(book_matcher)

def show_journey_selection():
    """Hi·ªÉn th·ªã m√†n h√¨nh ch·ªçn h√†nh tr√¨nh"""
    st.header("üéØ Khi ƒë·∫øn v·ªõi Caelio, b·∫°n ƒëang t√¨m ki·∫øm ƒëi·ªÅu g√¨?")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        ### üîç H√†nh tr√¨nh Kh√°m ph√°
        **"M·ªôt cu·ªën s√°ch khi·∫øn t√¥i nh√¨n th·∫•y ch√≠nh m√¨nh theo m·ªôt c√°ch m·ªõi"**
        
        D√†nh cho nh·ªØng ai mu·ªën:
        - Kh√°m ph√° b·∫£n th√¢n qua s√°ch
        - T√¨m hi·ªÉu phong c√°ch ƒë·ªçc c·ªßa m√¨nh
        - ƒê∆∞·ª£c g·ª£i √Ω s√°ch ph√π h·ª£p v·ªõi t√≠nh c√°ch
        """)
        
        if st.button("üöÄ B·∫Øt ƒë·∫ßu h√†nh tr√¨nh Kh√°m ph√°", use_container_width=True):
            st.session_state.journey_type = 'discovery'
            st.rerun()
    
    with col2:
        st.markdown("""
        ### üéì H√†nh tr√¨nh Chuy√™n ng√†nh
        **"M·ªôt cu·ªën s√°ch gi√∫p t√¥i h·ªçc, l√†m vi·ªác ho·∫∑c nghi√™n c·ª©u hi·ªáu qu·∫£ h∆°n"**
        
        D√†nh cho nh·ªØng ai mu·ªën:
        - ƒê·ªçc s√°ch chuy√™n ng√†nh
        - N√¢ng cao ki·∫øn th·ª©c lƒ©nh v·ª±c
        - Ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp
        """)
        
        if st.button("üéØ B·∫Øt ƒë·∫ßu h√†nh tr√¨nh Chuy√™n ng√†nh", use_container_width=True):
            st.session_state.journey_type = 'professional'
            st.rerun()

def show_discovery_questions(personality_system):
    """Hi·ªÉn th·ªã c√¢u h·ªèi h√†nh tr√¨nh kh√°m ph√°"""
    questions = list(personality_system.discovery_questions.items())
    current_q = st.session_state.current_question
    
    if current_q >= len(questions):
        # T√≠nh to√°n k·∫øt qu·∫£
        profile = personality_system.calculate_discovery_profile(st.session_state.answers)
        st.session_state.profile_result = profile
        st.rerun()
        return
    
    q_id, question_data = questions[current_q]
    
    # Progress bar
    progress = (current_q + 1) / len(questions)
    st.progress(progress)
    st.text(f"C√¢u {current_q + 1}/{len(questions)}")
    
    # Hi·ªÉn th·ªã c√¢u h·ªèi
    st.header(f"üìã {question_data['question']}")
    
    # Hi·ªÉn th·ªã l·ª±a ch·ªçn
    choices = question_data['choices']
    choice_texts = [f"{key}. {data['text']}" for key, data in choices.items()]
    
    selected = st.radio(
        "Ch·ªçn c√¢u tr·∫£ l·ªùi ph√π h·ª£p nh·∫•t:",
        options=list(choices.keys()),
        format_func=lambda x: f"{x}. {choices[x]['text']}",
        key=f"q_{q_id}"
    )
    
    # N√∫t ƒëi·ªÅu h∆∞·ªõng
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if current_q > 0:
            if st.button("‚¨ÖÔ∏è C√¢u tr∆∞·ªõc"):
                st.session_state.current_question -= 1
                st.rerun()
    
    with col3:
        if selected:
            if st.button("‚û°Ô∏è C√¢u ti·∫øp theo"):
                st.session_state.answers[q_id] = selected
                st.session_state.current_question += 1
                st.rerun()

def show_results(book_matcher):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch"""
    profile = st.session_state.profile_result
    
    st.header("üéâ K·∫øt qu·∫£ ph√¢n t√≠ch t√≠nh c√°ch ƒë·ªçc s√°ch c·ªßa b·∫°n")
    
    # Hi·ªÉn th·ªã profile ch√≠nh
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown(f"""
        ## üè∑Ô∏è {profile['profile_name']}
        **T√™n ti·∫øng Anh:** {profile['english_name']}
        
        ### üìä Chi ti·∫øt ƒëi·ªÉm s·ªë:
        - **Nh√≥m ch√≠nh:** {profile['primary_group']} ({profile['primary_score']} ƒëi·ªÉm)
        - **Nh√≥m ph·ª•:** {profile['secondary_group']} ({profile['secondary_score']} ƒëi·ªÉm)
        - **ƒêi·ªÉm Synthesizer:** {profile['synthesizer_score']}/8
        - **L√† Synthesizer:** {"‚úÖ C√≥" if profile['is_synthesizer'] else "‚ùå Kh√¥ng"}
        - **ƒêa ƒë·ªông l·ª±c:** {"‚úÖ C√≥" if profile['is_multi_motivated'] else "‚ùå Kh√¥ng"}
        """)
    
    with col2:
        # Bi·ªÉu ƒë·ªì ƒëi·ªÉm s·ªë
        scores_df = pd.DataFrame(
            list(profile['all_scores'].items()),
            columns=['Nh√≥m', 'ƒêi·ªÉm']
        )
        st.bar_chart(scores_df.set_index('Nh√≥m'))
    
    # M√¥ t·∫£ nh√≥m t√≠nh c√°ch
    show_personality_description(profile)
    
    # G·ª£i √Ω s√°ch
    show_book_recommendations(profile, book_matcher)
    
    # N√∫t reset
    if st.button("üîÑ L√†m l·∫°i b√†i test", use_container_width=True):
        reset_test()

def show_personality_description(profile):
    """Hi·ªÉn th·ªã m√¥ t·∫£ chi ti·∫øt v·ªÅ nh√≥m t√≠nh c√°ch"""
    descriptions = {
        'K·∫øt n·ªëi': {
            'title': 'ü§ù The Connectors - Ng∆∞·ªùi K·∫øt n·ªëi',
            'description': 'B·∫°n ƒë·ªçc s√°ch ƒë·ªÉ t√¨m ki·∫øm s·ª± h√≤a h·ª£p, t√¨nh y√™u v√† c·∫£m gi√°c thu·ªôc v·ªÅ. B·∫°n th√≠ch nh·ªØng c√¢u chuy·ªán ch·∫°m ƒë·∫øn tr√°i tim, gi√∫p b·∫°n hi·ªÉu v√† ƒë·ªìng c·∫£m v·ªõi ng∆∞·ªùi kh√°c.',
            'books': 'T√¢m l√Ω t√¨nh c·∫£m, ch·ªØa l√†nh, t·∫£n vƒÉn, ti·ªÉu thuy·∫øt gia ƒë√¨nh'
        },
        'T·ª± do': {
            'title': 'üïäÔ∏è The Individuals - Ng∆∞·ªùi T·ª± do',
            'description': 'B·∫°n t√¨m ki·∫øm t·ª± do, th·ªÉ hi·ªán b·∫£n s·∫Øc c√° nh√¢n v√† ph√° v·ª° khu√¥n m·∫´u. ƒê·ªçc s√°ch l√† c√°ch b·∫°n kh√°m ph√° th·∫ø gi·ªõi v√† ƒë·ªãnh h√¨nh c√° t√≠nh ri√™ng.',
            'books': 'Du k√Ω, ngh·ªá thu·∫≠t s·ªëng, ti·ªÉu thuy·∫øt s√°ng t·∫°o, s√°ch ph·∫£n t∆∞ x√£ h·ªôi'
        },
        'Tri th·ª©c': {
            'title': 'üß† The Thinkers - Ng∆∞·ªùi T∆∞ duy',
            'description': 'B·∫°n t√¨m ki·∫øm tri th·ª©c, s·ª± th·∫≠t v√† l√Ω gi·∫£i th·∫ø gi·ªõi. M·ªói cu·ªën s√°ch l√† m·ªôt c√¢u h·ªèi c·∫ßn ƒë∆∞·ª£c tr·∫£ l·ªùi, m·ªôt b√≠ ·∫©n c·∫ßn ƒë∆∞·ª£c kh√°m ph√°.',
            'books': 'Khoa h·ªçc ph·ªï th√¥ng, tri·∫øt h·ªçc, l·ªãch s·ª≠, s√°ch ph√¢n t√≠ch chuy√™n s√¢u'
        },
        'Chinh ph·ª•c': {
            'title': 'üèÜ The Achievers - Ng∆∞·ªùi Chinh ph·ª•c',
            'description': 'B·∫°n mu·ªën v∆∞·ª£t qua th·ª≠ th√°ch, t·∫°o ra th√†nh t·ª±u v√† bi·∫øn √Ω t∆∞·ªüng th√†nh hi·ªán th·ª±c. S√°ch l√† c√¥ng c·ª• gi√∫p b·∫°n ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u.',
            'books': 'S√°ch truy·ªÅn c·∫£m h·ª©ng, l√£nh ƒë·∫°o, chi·∫øn l∆∞·ª£c, h·ªìi k√Ω th√†nh c√¥ng'
        },
        'Ki·∫øn t·∫°o': {
            'title': 'üèóÔ∏è The Builders - Ng∆∞·ªùi X√¢y d·ª±ng',
            'description': 'B·∫°n mu·ªën x√¢y d·ª±ng n·ªÅn t·∫£ng v·ªØng ch·∫Øc, ph√°t tri·ªÉn k·ªπ nƒÉng th·ª±c t·∫ø. B·∫°n th√≠ch nh·ªØng cu·ªën s√°ch c√≥ t√≠nh ·ª©ng d·ª•ng cao.',
            'books': 'S√°ch k·ªπ nƒÉng, t√†i ch√≠nh, marketing, kh·ªüi nghi·ªáp, s√°ch h∆∞·ªõng nghi·ªáp'
        }
    }
    
    primary_group = profile['primary_group']
    desc = descriptions[primary_group]
    
    st.markdown(f"""
    ### {desc['title']}
    {desc['description']}
    
    **Th·ªÉ lo·∫°i s√°ch ph√π h·ª£p:** {desc['books']}
    """)
    
    if profile['is_synthesizer']:
        st.info("""
        üîó **ƒê·∫∑c ƒëi·ªÉm Synthesizer c·ªßa b·∫°n:**
        B·∫°n c√≥ kh·∫£ nƒÉng t∆∞ duy t·ªïng h·ª£p cao, th√≠ch k·∫øt n·ªëi tri th·ª©c t·ª´ nhi·ªÅu lƒ©nh v·ª±c kh√°c nhau. 
        B·∫°n ph√π h·ª£p v·ªõi nh·ªØng cu·ªën s√°ch c√≥ chi·ªÅu s√¢u, kh·∫£ nƒÉng li√™n k·∫øt ƒëa ng√†nh v√† g·ª£i m·ªü t∆∞ duy ph·∫£n t∆∞.
        """)

def show_book_recommendations(profile, book_matcher):
    """Hi·ªÉn th·ªã g·ª£i √Ω s√°ch"""
    st.header("üìñ G·ª£i √Ω s√°ch d√†nh cho b·∫°n")
    
    try:
        # Load d·ªØ li·ªáu s√°ch
        book_df = pd.read_csv('dataset/books_full_data.csv')
        
        # L·∫•y g·ª£i √Ω
        result = book_matcher.get_personalized_recommendations(
            st.session_state.answers, 
            book_df, 
            top_n=10
        )
        
        if len(result['recommendations']) > 0:
            st.success(f"T√¨m th·∫•y {result['total_matches']} cu·ªën s√°ch ph√π h·ª£p v·ªõi t√≠nh c√°ch c·ªßa b·∫°n!")
            
            # Hi·ªÉn th·ªã top s√°ch
            for i, (_, book) in enumerate(result['recommendations'].head(5).iterrows()):
                with st.container():
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"""
                        **{i+1}. {book['title']}**
                        - T√°c gi·∫£: {book.get('authors', 'N/A')}
                        - Th·ªÉ lo·∫°i: {book['category']}
                        - ƒê·ªô ph√π h·ª£p: {book['personality_match_score']:.0%}
                        """)
                    
                    with col2:
                        if 'cover_link' in book and pd.notna(book['cover_link']):
                            try:
                                st.image(book['cover_link'], width=80)
                            except:
                                st.text("üìö")
                        else:
                            st.text("üìö")
            
            # Th·ªëng k√™ th·ªÉ lo·∫°i
            st.subheader("üìä Ph√¢n b·ªë th·ªÉ lo·∫°i ph√π h·ª£p")
            category_dist = pd.Series(result['match_distribution'])
            st.bar_chart(category_dist)
        
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p trong c∆° s·ªü d·ªØ li·ªáu.")
    
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu s√°ch. Vui l√≤ng ki·ªÉm tra file 'dataset/books_full_data.csv'")
        
        # Hi·ªÉn th·ªã g·ª£i √Ω chung
        recommendations = book_matcher.personality_system.get_book_recommendations(profile)
        st.markdown("**Th·ªÉ lo·∫°i s√°ch ƒë∆∞·ª£c g·ª£i √Ω cho b·∫°n:**")
        for rec in recommendations:
            st.markdown(f"- {rec}")

def reset_test():
    """Reset to√†n b·ªô test"""
    st.session_state.current_question = 0
    st.session_state.answers = {}
    st.session_state.journey_type = None
    st.session_state.profile_result = None
    st.rerun()

if __name__ == "__main__":
    main()